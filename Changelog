r11 ====================================================================
- убрана функция grad_values_to_array() - функционал преобразования
  значений "выхлопа" генераторов перенесён в метод
  GradSender.__DMX_send_frame(), т.к. больше нигде не используется,
  а разворачивание списка списков в линейный список вынесено в функцию
  unwrap_lol()
+ в класс GradSender добавлен метод blackout(), "обнуляющий" все каналы
  во всех устройствах указанной universe (может использоваться в
  обработчиках ошибок, дабы в случае чего лампочки ток не жрали зря)
* убран мусор из модуля dmxgrad
* исправлен и дополнен пример использования - example.py

r10 ====================================================================
- исправлена ошибка в функции grad_values_to_array(), из-за которой
  функция могла возвращать list вместо array

r9 =====================================================================
+ добавлен класс RepeaterGenGradGen

r8 =====================================================================
* значение поля GradSender.DEFAULT_TICK_INTERVAL теперь соответствует
  30 обращениям к устройству в секунду
+ в класс GradPosition добавлены новые методы set_length_from_time()
  и compute_length()

r7 =====================================================================
* изменён класс SineGradGen:
  + теперь он может генерировать более одного канала значений
  + добавлены поля phase (со значениями фазы) и levels (со значениями
    уровней) для отдельных каналов;
  ! для генерации полностью независимых синусоид можно, как и раньше,
    засовывать несколько разных SineGradGen в ParallelGenGradGen
* изменён класс SquareGradGen:
  + добавлены поля phase (со значением фазы) и dutyCycle (со значением
    коэффициента заполнения)
  ! как и в предыдущей версии SquareGradGen генерирует только один
    канал значений

r6 =====================================================================
* изменён класс ImageGradGen:
  - исправлен конструктор: теперь проверяется совместимость формата
    изображения с этим модулем; на данный момент поддерживаются:
    - 8-битная шкала серого,
    - 24 и 32 бита RGB.
  + параметр channels конструктора может иметь значение None, в этом
    случае количество и номера каналов определяются автоматически
+ добавлена функция get_supported_image(), создающая из указанного
  изображения совместимое с ImageGradGen

r5 =====================================================================
* переделан и исправлен конструктор класса GradSender: параметры теперь
  передаются как словарь **kwargs, аналогично конструкторам прочих
  классов модуля
- исправлена ошибка в методе GradSender.__DMX_send_frame()
- исправлен класс GenGradGen, теперь нет необходимости вызывать его
  метод reset() после добавления вложенных генераторов вызовами
  метода add_subgen()
* функция unwrap_values() переделана в grad_values_to_array() и теперь
  возвращает массив байтов
* демонстрационная программа olatest.py:
  * переименована в example.py
  * переписана в б/м нормальный пример вместо чорт знает чего
  + добавлены изображения в качестве источников для градиентов

r4 =====================================================================
* изменен класс LineGradGen: удалёно поле fadeout, вместо него начальное
  и конечное значения задаются явно полями channelsFrom/channelsTo,
  содержащими кортежи для начальных и конечных значений многоканального
  градиента
+ добавлено правило "help" в Makefile

r3 =====================================================================
+ убраны методы GradGen.get_current_value() и переработан алгоритм
  генерации новых значений
+ добавлен режим GradPosition.RANDOM
+ добавлен класс SequenceGenGradGen

r1-r2 ==================================================================
! первый блин
