r6 =====================================================================
* изменён класс ImageGradGen:
  - исправлен конструктор: теперь проверяется совместимость формата
    изображения с этим модулем; на данный момент поддерживаются:
    - 8-битная шкала серого,
    - 24 и 32 бита RGB.
  + параметр channels конструктора может иметь значение None, в этом
    случае количество и номера каналов определяются автоматически
+ добавлена функция get_supported_image(), создающая из указанного
  изображения совместимое с ImageGradGen

r5 =====================================================================
* переделан и исправлен конструктор класса GradSender: параметры теперь
  передаются как словарь **kwargs, аналогично конструкторам прочих
  классов модуля
- исправлена ошибка в методе GradSender.__DMX_send_frame()
- исправлен класс GenGradGen, теперь нет необходимости вызывать его
  метод reset() после добавления вложенных генераторов вызовами
  метода add_subgen()
* функция unwrap_values() переделана в grad_values_to_array() и теперь
  возвращает массив байтов
* демонстрационная программа olatest.py:
  * переименована в example.py
  * переписана в б/м нормальный пример вместо чорт знает чего
  + добавлены изображения в качестве источников для градиентов

r4 =====================================================================
* изменен класс LineGradGen: удалёно поле fadeout, вместо него начальное
  и конечное значения задаются явно полями channelsFrom/channelsTo,
  содержащими кортежи для начальных и конечных значений многоканального
  градиента
+ добавлено правило "help" в Makefile

r3 =====================================================================
+ убраны методы GradGen.get_current_value() и переработан алгоритм
  генерации новых значений
+ добавлен режим GradPosition.RANDOM
+ добавлен класс SequenceGenGradGen

r1-r2 ==================================================================
! первый блин
