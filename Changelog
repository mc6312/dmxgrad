r17 ====================================================================
- исправлен метод ConstantGradGen.init_attrs() - пытался получить
  параметр по имени "value" вместо "values"
- исправления в конструкторе класса GradPosition, из-за которого мог
  производиться ненужный пересчёт из секунд
- убрана поддержка неиспользуемого параметра fixrange в конструкторе
  класса GradSender, т.к. ещё с 11й ревизии передаваемые olad значения
  принудительно вгоняются в требуемый диапазон в методе __DMX_send_frame()
- исправлен метод SequenceGenGradGen.get_next_value() - производилась
  лишняя итерация

r16 ====================================================================
* метод GradGen.param_get_grad() переименован в kwargs_get(), т.к.
  1. предназначен для получения параметров любого типа;
  2. предназначен для обработки kwargs из метода init_attrs(), а не
     для получения параметров экземпляра класса, как могло бы показаться
     по старому названию метода
* метод GradGen.param_get_tof() переименован в kwargs_get_tof() по тем
  же соображениям
+ добавлен класс GenRecorderGen (см. описание)

r15 ====================================================================
- исправления в методе SequenceGenGradGen.init_attrs()
- исправления в демонстрационной программе example.py
- исправления в README.md
* изменён класс GradPosition:
  * "константа" DEFAULT_TICK_INTERVAL перенесена из класса GradSender
    в класс GradPosition
  * изменён метод set_length() - кроме числовых значений он теперь
    может получать строку вида ЧЧ:ММ:СС, см. описание метода set_length()
  * метод compute_length() убран, его функциональность перенесена
    в метод set_length()
  - убран метод set_length_from_time() по тем же причинам
  + метод set_direction() и соотв. параметр конструктора может принимать
    кроме положительного/отрицательного числа также булевское значение,
    в этом случае значению False соответствует direction = -1
- исправлена демонстрационная программа example.py

r14 ====================================================================
* изменено поведение функции unwrap_lol():
  + на входе принимает любые типы, списки и кортежи - разворачивает,
    прочие - помещает в возвращаемый список;
  + добавлена опциональная проверка типов: "прочие" проверяются на
    соответствие указанному типу (см. описание функции), в случае
    несоответствия генерируется исключение
+ конструкторам классов, порождённых от GenGradGen, теперь можно передавать
  параметр subgen со списком экземпляров потомков GradGen (как ранее
  методу add_subgen()); упомянутый метод также может использоваться
* функция fparam_to_tuple() перемещена в класс GradGen в качестве
  статического метода и переименована в param_get_tof()
+ в класс GradGen добавлен статический метод param_get_grad(), см. описание
* для совместимости с аццким разнообразием шрифтов в природе функция
  channels_to_str() вместо псевдографики теперь использует символы
  из диапазона ASCII
+ добавлен класс EnvelopeGenGradGen, возвращающий значения от генератора,
  амплитудно модулированные значениями другого генератора
+ дополнена демонстрационная программа example.py

r13 ====================================================================
+ отладочной функции channels_to_str() теперь можно указывать длину
  прогрессбаров;
  старый вариант отображения - при значении длины < 1 символа или None
- исправлено поведение класса SineWaveGradGen - учитываются значения
  поля lowLevels
- исправлен класс SquareWaveGradGen, его параметры сделаны подобными
  параметрам класса SineWaveGradGen
* изменена инициализация экземпляров класса GradGen и его потомков -
  обработка параметров конструкторов вынесена в отдельный метод
  init_attrs(), т.к. конструктор должен вызывать метод reset() только
  после присвоения всех полей
- исправлен класс LineGradGen
- исправлена демонстрационная программа example.py

r12 ====================================================================
! как я и угрожал, сломана вся совместимость с предыдущими версиями:
* все генераторы теперь выдают значения float в диапазоне 0.0-1.0
  (дабы избавиться от лишних вычислений и промежуточных преобразований),
  а в байты всё преобразовывается один раз при отправке демону olad;
+ в конструкторах генераторов кое-где добавлена проверка типов и диапазонов
  значений параметров
- убрана функция rgb_from_hls(), т.к. теперь можно использовать напрямую
  hls_to_rgb() из питоньего модуля colorsys
* функция rgb_from_str() переименована в str_to_rgb() для единообразия
+ добавлен класс NoiseGen (выдающий случайные значения в указанном
  диапазоне)
+ добавлен класс WaveGradGen в качестве базового для SineWaveGradGen и
  SquareWaveGradGen (бывших SineGradGen, SquareGradGen);
  см. описания классов
* изменены конструкторы классов SineWaveGradGen и SquareWaveGradGen:
  + можно указать количество периодов волны (ранее генерировался
    только один) параметром periods конструктора;
    если указано меньше значений, чем каналов генератора - для недостающих
    значений берутся значения по умолчанию (см. ниже)
  + можно указать минимальные уровни в каналах с помощью необязательного
    параметра lowLevels
  * параметр phase переименован в phases, изменено его поведение:
    если указано меньше значений, чем количество каналов генератора -
    для недостающих значений phases берутся значения по умолчанию
+ добавлена функция channels_to_str(), предназначенная для визуализации
  при отладке генераторов (см. описание)

r11 ====================================================================
- убрана функция grad_values_to_array() - функционал преобразования
  значений "выхлопа" генераторов перенесён в метод
  GradSender.__DMX_send_frame(), т.к. больше нигде не используется,
  а разворачивание списка списков в линейный список вынесено в функцию
  unwrap_lol()
+ в класс GradSender добавлен метод blackout(), "обнуляющий" все каналы
  во всех устройствах указанной universe (может использоваться в
  обработчиках ошибок, дабы в случае чего лампочки ток не жрали зря)
* убран мусор из модуля dmxgrad
* исправлен и дополнен пример использования - example.py

r10 ====================================================================
- исправлена ошибка в функции grad_values_to_array(), из-за которой
  функция могла возвращать list вместо array

r9 =====================================================================
+ добавлен класс RepeaterGenGradGen

r8 =====================================================================
* значение поля GradSender.DEFAULT_TICK_INTERVAL теперь соответствует
  30 обращениям к устройству в секунду
+ в класс GradPosition добавлены новые методы set_length_from_time()
  и compute_length()

r7 =====================================================================
* изменён класс SineGradGen:
  + теперь он может генерировать более одного канала значений
  + добавлены поля phase (со значениями фазы) и levels (со значениями
    уровней) для отдельных каналов;
  ! для генерации полностью независимых синусоид можно, как и раньше,
    засовывать несколько разных SineGradGen в ParallelGenGradGen
* изменён класс SquareGradGen:
  + добавлены поля phase (со значением фазы) и dutyCycle (со значением
    коэффициента заполнения)
  ! как и в предыдущей версии SquareGradGen генерирует только один
    канал значений

r6 =====================================================================
* изменён класс ImageGradGen:
  - исправлен конструктор: теперь проверяется совместимость формата
    изображения с этим модулем; на данный момент поддерживаются:
    - 8-битная шкала серого,
    - 24 и 32 бита RGB.
  + параметр channels конструктора может иметь значение None, в этом
    случае количество и номера каналов определяются автоматически
+ добавлена функция get_supported_image(), создающая из указанного
  изображения совместимое с ImageGradGen

r5 =====================================================================
* переделан и исправлен конструктор класса GradSender: параметры теперь
  передаются как словарь **kwargs, аналогично конструкторам прочих
  классов модуля
- исправлена ошибка в методе GradSender.__DMX_send_frame()
- исправлен класс GenGradGen, теперь нет необходимости вызывать его
  метод reset() после добавления вложенных генераторов вызовами
  метода add_subgen()
* функция unwrap_values() переделана в grad_values_to_array() и теперь
  возвращает массив байтов
* демонстрационная программа olatest.py:
  * переименована в example.py
  * переписана в б/м нормальный пример вместо чорт знает чего
  + добавлены изображения в качестве источников для градиентов

r4 =====================================================================
* изменен класс LineGradGen: удалёно поле fadeout, вместо него начальное
  и конечное значения задаются явно полями channelsFrom/channelsTo,
  содержащими кортежи для начальных и конечных значений многоканального
  градиента
+ добавлено правило "help" в Makefile

r3 =====================================================================
+ убраны методы GradGen.get_current_value() и переработан алгоритм
  генерации новых значений
+ добавлен режим GradPosition.RANDOM
+ добавлен класс SequenceGenGradGen

r1-r2 ==================================================================
! первый блин
